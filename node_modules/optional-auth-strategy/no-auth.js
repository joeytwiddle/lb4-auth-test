var passport = require('passport-strategy')
  , util = require('util');


/**
 * `NoAuthStrategy` constructor.
 *
 * Always acts as if authentication was successful, but actually provides
 * a null user.
 *
 * @param {Object} [options]
 * @param {Function} verify
 * @api public
 */
function NoAuthStrategy(options, verify) {
  if (typeof options == 'function') {
    verify = options;
    options = {};
  }

  passport.Strategy.call(this);
  this.name = 'noauth';
  this._verify = verify;
  this._realm = options.realm || 'Users';
  this._passReqToCallback = options.passReqToCallback;
}

/**
 * Inherit from `passport.Strategy`.
 */
util.inherits(NoAuthStrategy, passport.Strategy);

/**
 * Authenticate request based on the contents of a HTTP Basic authorization
 * header.
 *
 * @param {Object} req
 * @api protected
 */
NoAuthStrategy.prototype.authenticate = function(req) {
  this.success(null);
}

/**
 * Authentication challenge.
 *
 * @api private
 */
NoAuthStrategy.prototype._challenge = function() {
  return 'NoAuth realm="' + this._realm + '"';
}


/**
 * Expose `NoAuthStrategy`.
 */ 
module.exports = NoAuthStrategy;
